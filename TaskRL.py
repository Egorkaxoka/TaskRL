
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import asyncio
from datetime import datetime

TOKEN = "8182259593:AAE79k5zKIORY4yKi_Sou4Lil3vE7tHWJvs"
EXECUTOR_ID = 609535548  # ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è

bot = Bot(token=TOKEN)
dp = Dispatcher()

task_counter = 1
executor_tasks = {}
customer_tasks = {}

class TaskForm(StatesGroup):
    choosing_task_type = State()
    choosing_priority = State()
    entering_task = State()
    entering_workload = State()  # –¢–æ–ª—å–∫–æ –¥–ª—è –ö–ü
    entering_deadline = State()
    confirming_task = State()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
task_type_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ö–ü"), KeyboardButton(text="üìÑ –û–¢–ß–Å–¢")],
        [KeyboardButton(text="‚úâÔ∏è –ü–ò–°–¨–ú–û"), KeyboardButton(text="üîß –î–†–£–ì–û–ï")]
    ], resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
priority_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨áÔ∏è –ù–∏–∑–∫–∏–π"), KeyboardButton(text="üîπ –°—Ä–µ–¥–Ω–∏–π")],
        [KeyboardButton(text="üî∫ –í—ã—Å–æ–∫–∏–π"), KeyboardButton(text="üö® –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π")]
    ], resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
confirm_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞
skip_deadline_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
customer_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")]
    ], resize_keyboard=True
)

priority_map = {
    "‚¨áÔ∏è –ù–∏–∑–∫–∏–π": 1,
    "üîπ –°—Ä–µ–¥–Ω–∏–π": 2,
    "üî∫ –í—ã—Å–æ–∫–∏–π": 3,
    "üö® –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π": 4
}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    if message.from_user.id == EXECUTOR_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å!", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")]], resize_keyboard=True))
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∑–∞–∫–∞–∑—á–∏–∫!", reply_markup=customer_kb)

@dp.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
async def create_task(message: types.Message, state: FSMContext):
    await state.set_state(TaskForm.choosing_task_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=task_type_kb)

@dp.message(TaskForm.choosing_task_type)
async def choose_task_type(message: types.Message, state: FSMContext):
    await state.update_data(task_type=message.text)
    await state.set_state(TaskForm.choosing_priority)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=priority_kb)

@dp.message(TaskForm.choosing_priority)
async def choose_priority(message: types.Message, state: FSMContext):
    await state.update_data(priority=message.text)
    await state.set_state(TaskForm.entering_task)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message(TaskForm.entering_task)
async def enter_task(message: types.Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    data = await state.get_data()
    
    if data["task_type"] == "üìä –ö–ü":
        await state.set_state(TaskForm.entering_workload)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º —Ä–∞–±–æ—Ç—ã:")
    else:
        await state.set_state(TaskForm.entering_deadline)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=skip_deadline_kb)


@dp.message(TaskForm.entering_workload)
async def enter_workload(message: types.Message, state: FSMContext):
    await state.update_data(workload=message.text)
    await state.set_state(TaskForm.entering_deadline)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")

@dp.message(TaskForm.entering_deadline)
async def enter_deadline(message: types.Message, state: FSMContext):
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(deadline=None)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –∫–∞–∫ None
    else:
        try:
            deadline = datetime.strptime(message.text, "%d.%m.%Y")
            await state.update_data(deadline=deadline)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–¥–ª–∞–π–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return
    
    await state.set_state(TaskForm.confirming_task)
    await send_task_summary(message, state)


async def send_task_summary(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_summary = (
        f"üìå *–í–∞—à–∞ –∑–∞–¥–∞—á–∞:*\n"
        f"**–¢–∏–ø:** {data['task_type']}\n"
        f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {data['priority']}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {data['task_text']}\n"
    )

    if "workload" in data:
        task_summary += f"**–û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã:** {data['workload']}\n"
    if data.get("deadline"):
        task_summary += f"**–î–µ–¥–ª–∞–π–Ω:** {data['deadline'].strftime('%d.%m.%Y')}\n"
    else:
        task_summary += "**–î–µ–¥–ª–∞–π–Ω:** ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω\n"

    await message.answer(task_summary, parse_mode="Markdown")
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á–∏:", reply_markup=confirm_kb)


@dp.message(lambda message: message.text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
async def confirm_task(message: types.Message, state: FSMContext):
    global task_counter
    data = await state.get_data()
    task_id = str(task_counter)

    task_summary = (
        f"üìå *–ó–∞–¥–∞—á–∞ #{task_id}:*\n"
        f"üë§ **–ó–∞–∫–∞–∑—á–∏–∫:** {message.from_user.full_name}\n"
        f"**–¢–∏–ø:** {data['task_type']}\n"
        f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {data['priority']}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {data['task_text']}\n"
    )

    if "workload" in data:
        task_summary += f"**–û–±—ä–µ–º —Ä–∞–±–æ—Ç—ã:** {data['workload']}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–¥–ª–∞–π–Ω
    if data.get("deadline"):
        task_summary += f"**–î–µ–¥–ª–∞–π–Ω:** {data['deadline'].strftime('%d.%m.%Y')}\n"
    else:
        task_summary += "**–î–µ–¥–ª–∞–π–Ω:** ‚ùå –ù–µ —É–∫–∞–∑–∞–Ω\n"

    executor_tasks.setdefault(EXECUTOR_ID, []).append(
        (task_id, message.from_user.id, task_summary, priority_map[data["priority"]], data.get("deadline"))
    )

    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!", parse_mode="Markdown", reply_markup=customer_kb)
    await bot.send_message(EXECUTOR_ID, f"üì¢ *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–∞—Å!*\n{task_summary}", parse_mode="Markdown")

    task_counter += 1
    await state.clear()


@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_task(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=customer_kb)



@dp.message(lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_tasks(message: types.Message):
    if message.from_user.id == EXECUTOR_ID:  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
        tasks = executor_tasks.get(EXECUTOR_ID, [])
    else:  # –ó–∞–∫–∞–∑—á–∏–∫ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏
        tasks = [task for task in executor_tasks.get(EXECUTOR_ID, []) if task[1] == message.from_user.id]

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    tasks = sorted(tasks, key=lambda x: x[3], reverse=True)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É

    for task_id, user_id, task_text, priority, deadline in tasks:
        if message.from_user.id == EXECUTOR_ID:
            task_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"done_{task_id}_{user_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data=f"reject_{task_id}_{user_id}")]
                ]
            )
        else:
            task_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data=f"reject_{task_id}_{user_id}")]
                ]
            )

        await message.answer(task_text, parse_mode="Markdown", reply_markup=task_kb)

@dp.callback_query(lambda callback: callback.data.startswith("done_") or callback.data.startswith("reject_"))
async def handle_task_action(callback: types.CallbackQuery):
    data_parts = callback.data.split("_")
    action, task_id, user_id = data_parts[0], data_parts[1], int(data_parts[2])

    user_tasks = executor_tasks.get(EXECUTOR_ID, [])
    task = next((t for t in user_tasks if t[0] == task_id), None)

    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor_tasks[EXECUTOR_ID] = [t for t in user_tasks if t[0] != task_id]

    if callback.from_user.id == EXECUTOR_ID:  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
        if action == "done":
            await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            await callback.message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        else:
            await bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞–¥–∞—á–∞ #{task_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
            await callback.message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")

    else:  # –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
        await bot.send_message(EXECUTOR_ID, f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ #{task_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.")
        await callback.message.answer(f"üö´ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–¥–∞—á—É #{task_id}.")

    await callback.answer()

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
